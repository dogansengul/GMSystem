import { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  TableSortLabel,
  Button,
  Card,
  CardContent,
  Divider,
  Alert,
  AlertTitle,
  TextField,
  InputAdornment,
  IconButton,
  Chip,
  Tooltip,
  CircularProgress
} from '@mui/material';
import {
  Search as SearchIcon,
  FileDownload as FileDownloadIcon,
  Refresh as RefreshIcon,
  FilterList as FilterListIcon,
  Warning as WarningIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import DeansOfficeDashboardLayout from '../layout/DeansOfficeDashboardLayout';

// Types
interface StudentRanking {
  id: string;
  rank: number;
  studentId: string;
  name: string;
  department: string;
  faculty: string;
  gpa: number;
  credits: number;
  duplicateRecords?: boolean;
  graduationEligible: boolean;
}

interface RankingMetadata {
  totalStudents: number;
  eligibleStudents: number;
  hasDuplicates: boolean;
  mixedGraduationStatus: boolean;
  lastUpdated: Date;
}

// Sample data
const sampleStudentRankings: StudentRanking[] = [
  { id: '1', rank: 1, studentId: '220202101', name: 'Ali Yılmaz', department: 'Computer Engineering', faculty: 'Engineering', gpa: 3.98, credits: 144, duplicateRecords: false, graduationEligible: true },
  { id: '2', rank: 2, studentId: '220202056', name: 'Ayşe Kaya', department: 'Computer Engineering', faculty: 'Engineering', gpa: 3.97, credits: 148, duplicateRecords: false, graduationEligible: true },
  { id: '3', rank: 3, studentId: '210201089', name: 'Mehmet Demir', department: 'Electrical Engineering', faculty: 'Engineering', gpa: 3.95, credits: 152, duplicateRecords: true, graduationEligible: true },
  { id: '4', rank: 4, studentId: '210305062', name: 'Zeynep Yıldız', department: 'Physics', faculty: 'Science', gpa: 3.93, credits: 138, duplicateRecords: false, graduationEligible: true },
  { id: '5', rank: 5, studentId: '220401023', name: 'Mustafa Şahin', department: 'Architecture', faculty: 'Architecture', gpa: 3.91, credits: 160, duplicateRecords: false, graduationEligible: true },
  { id: '6', rank: 6, studentId: '210301045', name: 'Fatma Çelik', department: 'Chemistry', faculty: 'Science', gpa: 3.89, credits: 136, duplicateRecords: false, graduationEligible: true },
  { id: '7', rank: 7, studentId: '220205078', name: 'Ahmet Aksoy', department: 'Mechanical Engineering', faculty: 'Engineering', gpa: 3.88, credits: 142, duplicateRecords: false, graduationEligible: true },
  { id: '8', rank: 8, studentId: '210208091', name: 'Sema Yılmaz', department: 'Civil Engineering', faculty: 'Engineering', gpa: 3.86, credits: 146, duplicateRecords: true, graduationEligible: true },
  { id: '9', rank: 9, studentId: '220301012', name: 'Emre Koç', department: 'Mathematics', faculty: 'Science', gpa: 3.85, credits: 134, duplicateRecords: false, graduationEligible: true },
  { id: '10', rank: 10, studentId: '210204067', name: 'Elif Şahin', department: 'Industrial Design', faculty: 'Architecture', gpa: 3.84, credits: 150, duplicateRecords: false, graduationEligible: true },
  { id: '11', rank: 11, studentId: '220203045', name: 'Burak Demir', department: 'Bioengineering', faculty: 'Engineering', gpa: 3.83, credits: 140, duplicateRecords: false, graduationEligible: true },
  { id: '12', rank: 12, studentId: '210307034', name: 'Gizem Yılmaz', department: 'Molecular Biology', faculty: 'Science', gpa: 3.82, credits: 138, duplicateRecords: false, graduationEligible: true },
  { id: '13', rank: 13, studentId: '220207089', name: 'Oğuz Kaya', department: 'Materials Engineering', faculty: 'Engineering', gpa: 3.80, credits: 144, duplicateRecords: false, graduationEligible: true },
  { id: '14', rank: 14, studentId: '210401032', name: 'Ceren Arslan', department: 'Urban Planning', faculty: 'Architecture', gpa: 3.79, credits: 156, duplicateRecords: false, graduationEligible: true },
  { id: '15', rank: 15, studentId: '220302056', name: 'Onur Öztürk', department: 'Physics', faculty: 'Science', gpa: 3.78, credits: 132, duplicateRecords: false, graduationEligible: true },
];

const mockRankingMetadata: RankingMetadata = {
  totalStudents: 42,
  eligibleStudents: 15,
  hasDuplicates: true,
  mixedGraduationStatus: true,
  lastUpdated: new Date('2025-05-15T14:30:00')
};

type Order = 'asc' | 'desc';

const FacultyRankingPage = () => {
  const [order, setOrder] = useState<Order>('desc');
  const [orderBy, setOrderBy] = useState<keyof StudentRanking>('gpa');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFaculty, setSelectedFaculty] = useState<string | null>(null);
  const [rankingMetadata, setRankingMetadata] = useState<RankingMetadata | null>(mockRankingMetadata);
  const [warnings, setWarnings] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Simulate data loading and warnings generation
  useEffect(() => {
    const newWarnings: string[] = [];
    
    if (rankingMetadata) {
      if (rankingMetadata.hasDuplicates) {
        newWarnings.push('Duplicate student records merged from different departments');
      }
      
      if (rankingMetadata.mixedGraduationStatus) {
        newWarnings.push('Some students did not meet graduation criteria and were excluded');
      }
      
      if (rankingMetadata.eligibleStudents === 0) {
        setError('No eligible students found for ranking. Please check department files.');
      } else {
        setError(null);
      }
    }
    
    setWarnings(newWarnings);
  }, [rankingMetadata]);
  
  // Handle sort request
  const handleRequestSort = (property: keyof StudentRanking) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };
  
  // Handle pagination
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };
  
  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  
  // Filter and sort data
  const filteredData = sampleStudentRankings.filter(student => {
    const matchesSearch = searchQuery === '' || 
      student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      student.studentId.includes(searchQuery) ||
      student.department.toLowerCase().includes(searchQuery.toLowerCase());
      
    const matchesFaculty = selectedFaculty === null || student.faculty === selectedFaculty;
    
    return matchesSearch && matchesFaculty;
  });
  
  const sortedData = [...filteredData].sort((a, b) => {
    if (orderBy === 'rank') {
      return order === 'asc' ? a.rank - b.rank : b.rank - a.rank;
    }
    
    if (orderBy === 'gpa') {
      return order === 'asc' ? a.gpa - b.gpa : b.gpa - a.gpa;
    }
    
    if (orderBy === 'credits') {
      return order === 'asc' ? a.credits - b.credits : b.credits - a.credits;
    }
    
    // String comparison for other fields
    const aValue = a[orderBy] as string;
    const bValue = b[orderBy] as string;
    
    return order === 'asc'
      ? aValue.localeCompare(bValue)
      : bValue.localeCompare(aValue);
  });
  
  // Pagination
  const paginatedData = sortedData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  // Faculty filter options
  const faculties = Array.from(new Set(sampleStudentRankings.map(student => student.faculty)));
  
  // Generate a fresh ranking
  const refreshRanking = () => {
    setIsLoading(true);
    
    // Simulate API call or data processing
    setTimeout(() => {
      // Random chance of having no eligible students for error demonstration
      const noEligibleStudents = Math.random() < 0.2;
      
      if (noEligibleStudents) {
        setRankingMetadata({
          ...mockRankingMetadata,
          eligibleStudents: 0,
          lastUpdated: new Date()
        });
      } else {
        setRankingMetadata({
          ...mockRankingMetadata,
          lastUpdated: new Date()
        });
      }
      
      setIsLoading(false);
    }, 1500);
  };
  
  // Export functionality
  const handleExportRankings = () => {
    alert('Ranking data exported successfully!');
  };

  return (
    <DeansOfficeDashboardLayout>
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          Faculty Ranking
        </Typography>
        <Typography variant="body1" color="text.secondary">
          View and manage consolidated faculty-wide student rankings
        </Typography>
      </Box>
      
      {/* Error alert */}
      {error && (
        <Alert 
          severity="error" 
          sx={{ mb: 3 }}
          onClose={() => setError(null)}
        >
          <AlertTitle>Error</AlertTitle>
          {error}
        </Alert>
      )}
      
      {/* Warning alerts */}
      {warnings.length > 0 && (
        <Alert 
          severity="warning" 
          sx={{ mb: 3 }}
          onClose={() => setWarnings([])}
        >
          <AlertTitle>Warnings</AlertTitle>
          <ul style={{ margin: 0, paddingLeft: '1.5rem' }}>
            {warnings.map((warning, index) => (
              <li key={index}>{warning}</li>
            ))}
          </ul>
        </Alert>
      )}
      
      <Paper sx={{ p: 2, mb: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <TextField
            label="Search Students"
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon fontSize="small" />
                </InputAdornment>
              ),
            }}
            sx={{ width: { xs: '100%', sm: '50%', md: '30%' } }}
          />
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              variant="outlined"
              startIcon={<RefreshIcon />}
              onClick={refreshRanking}
              disabled={isLoading}
            >
              {isLoading ? 'Refreshing...' : 'Refresh'}
            </Button>
            
            <Button
              variant="contained"
              startIcon={<FileDownloadIcon />}
              onClick={handleExportRankings}
            >
              Export to CSV
            </Button>
          </Box>
        </Box>
      </Paper>
      
      <Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={3}>
        <Box gridColumn={{ xs: 'span 12', lg: 'span 9' }}>
          <Paper sx={{ width: '100%', overflow: 'hidden' }}>
            <TableContainer sx={{ maxHeight: 600 }}>
              <Table stickyHeader aria-label="faculty ranking table">
                <TableHead>
                  <TableRow>
                    <TableCell>
                      <TableSortLabel
                        active={orderBy === 'rank'}
                        direction={orderBy === 'rank' ? order : 'asc'}
                        onClick={() => handleRequestSort('rank')}
                      >
                        Rank
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={orderBy === 'studentId'}
                        direction={orderBy === 'studentId' ? order : 'asc'}
                        onClick={() => handleRequestSort('studentId')}
                      >
                        Student ID
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={orderBy === 'name'}
                        direction={orderBy === 'name' ? order : 'asc'}
                        onClick={() => handleRequestSort('name')}
                      >
                        Name
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={orderBy === 'department'}
                        direction={orderBy === 'department' ? order : 'asc'}
                        onClick={() => handleRequestSort('department')}
                      >
                        Department
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={orderBy === 'faculty'}
                        direction={orderBy === 'faculty' ? order : 'asc'}
                        onClick={() => handleRequestSort('faculty')}
                      >
                        Faculty
                      </TableSortLabel>
                    </TableCell>
                    <TableCell align="right">
                      <TableSortLabel
                        active={orderBy === 'gpa'}
                        direction={orderBy === 'gpa' ? order : 'asc'}
                        onClick={() => handleRequestSort('gpa')}
                      >
                        GPA
                      </TableSortLabel>
                    </TableCell>
                    <TableCell align="right">
                      <TableSortLabel
                        active={orderBy === 'credits'}
                        direction={orderBy === 'credits' ? order : 'asc'}
                        onClick={() => handleRequestSort('credits')}
                      >
                        Credits
                      </TableSortLabel>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {paginatedData.length > 0 ? (
                    paginatedData.map((student) => (
                      <TableRow key={student.id} hover>
                        <TableCell>{student.rank}</TableCell>
                        <TableCell>{student.studentId}</TableCell>
                        <TableCell>
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            {student.name}
                            {student.duplicateRecords && (
                              <Tooltip title="Records merged from multiple departments">
                                <InfoIcon color="warning" fontSize="small" sx={{ ml: 1 }} />
                              </Tooltip>
                            )}
                          </Box>
                        </TableCell>
                        <TableCell>{student.department}</TableCell>
                        <TableCell>{student.faculty}</TableCell>
                        <TableCell align="right">{student.gpa.toFixed(2)}</TableCell>
                        <TableCell align="right">{student.credits}</TableCell>
                      </TableRow>
                    ))
                  ) : isLoading ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center" sx={{ py: 4 }}>
                        <CircularProgress size={40} />
                        <Typography variant="body2" sx={{ mt: 2 }}>
                          Loading ranking data...
                        </Typography>
                      </TableCell>
                    </TableRow>
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                          No ranking data found
                        </Typography>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            
            <TablePagination
              rowsPerPageOptions={[10, 25, 50]}
              component="div"
              count={filteredData.length}
              rowsPerPage={rowsPerPage}
              page={page}
              onPageChange={handleChangePage}
              onRowsPerPageChange={handleChangeRowsPerPage}
            />
          </Paper>
        </Box>
        
        <Box gridColumn={{ xs: 'span 12', lg: 'span 3' }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Ranking Information
              </Typography>
              <Divider sx={{ mb: 2 }} />
              
              {rankingMetadata && (
                <>
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="subtitle2" color="text.secondary">
                      Students Ranked
                    </Typography>
                    <Typography variant="body1">
                      {rankingMetadata.eligibleStudents} eligible of {rankingMetadata.totalStudents} total
                    </Typography>
                  </Box>
                  
                  {rankingMetadata.hasDuplicates && (
                    <Alert severity="info" icon={<InfoIcon />} sx={{ mb: 2 }}>
                      <Typography variant="caption">
                        Students appearing in multiple department files have been merged
                      </Typography>
                    </Alert>
                  )}
                  
                  {rankingMetadata.mixedGraduationStatus && (
                    <Alert severity="info" icon={<InfoIcon />} sx={{ mb: 2 }}>
                      <Typography variant="caption">
                        Only students meeting graduation criteria are included in the ranking
                      </Typography>
                    </Alert>
                  )}
                </>
              )}
              
              <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
                Filter by Faculty
              </Typography>
              
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {faculties.map(faculty => (
                  <Chip
                    key={faculty}
                    label={faculty}
                    onClick={() => setSelectedFaculty(faculty)}
                    variant={selectedFaculty === faculty ? 'filled' : 'outlined'}
                    color={selectedFaculty === faculty ? 'primary' : 'default'}
                  />
                ))}
                {selectedFaculty && (
                  <Chip
                    label="Clear"
                    onClick={() => setSelectedFaculty(null)}
                    variant="outlined"
                  />
                )}
              </Box>
              
              <Alert severity="info" sx={{ mt: 3 }}>
                <Typography variant="caption">
                  Last updated: {rankingMetadata?.lastUpdated.toLocaleDateString()} at {rankingMetadata?.lastUpdated.toLocaleTimeString()}
                </Typography>
              </Alert>
            </CardContent>
          </Card>
        </Box>
      </Box>
    </DeansOfficeDashboardLayout>
  );
};

export default FacultyRankingPage;

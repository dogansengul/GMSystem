'use strict';
const crypto = require('crypto');

function bufferToPassword(buffer, rules) {
    let letters = rules.characters || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    let symbols = rules.symbols || '~!@#$%^&*_-+=`|\(){}[]:;"\'<>,.?/'.split('');
    let numbers = rules.numbers || [0,1,2,3,4,5,6,7,8,9];
    let options = letters.concat(symbols).concat(numbers);

    let password = '';
    for(let i = 0; i < buffer.length; i++) {
        let index = buffer.readUInt8(i);
        if(!index) continue;
        index = index % options.length;
        password += options[index];
    }

    return Promise.resolve(password);
}

function generatePasswordBuffer(password, salt, data, length) {
    return new Promise((resolve, reject) => {
        let combinedSalt = salt + data.join('');
        crypto.pbkdf2(password, combinedSalt, 975142 + (salt.length * 125), length, 'sha512', (err, key) => {
            if(err) {
                reject(err);
            } else {
                resolve(key);
            }
        });
    });
}

module.exports = function(password, salt, data, length, rules) {
    return generatePasswordBuffer(password, salt, data, length)
        .then(buffer => bufferToPassword(buffer, rules));
}
module.exports.generatePasswordBuffer = generatePasswordBuffer;
module.exports.bufferToPassword = bufferToPassword;